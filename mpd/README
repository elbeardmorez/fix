
# PulseOutputPlugin_.dont.lock.null.thread.diff [git sha:503ed9c331426d625ddcfef25356d222c13af8a | rejected]
-fix potential SIGABRTs due to non-spec use of the mainloop
-mpd attempts to obtain a lock on the mainloop thread before it is started
-considering pa_mainloop_lock's 'pa_assert(!m->thread || !pa_thread_is_running(m->thread) || !in_worker(m))' code, with m->thread == NULL, the resulting false-positive and short-circuit operator || prevents a SIGABRT slightly further down the codepath. i imagine this false-positive 'saviour' being removed some day with the expectation that implementations start the thread before requiring a lock

# PulseOutputPlugin_.avoid.locking.mainloop.object.from.within.mainloop.thread.diff [git sha:9da57e7458ed2e539ba1693ca748c0e5c7969585 | committed]
-fixes regression introduced by: '8d6fedf8177d0d2ced81e6d93d35c368b2ac69db [PATCH] Mixer: add class MixerListener' -listener.OnMixerVolumeChanged() called GetVolume() which attempted to acquire the lock but as per 'pa_threaded_mainloop_lock()' documentation:
This function may not be called inside the event loop thread. Events that are dispatched from the event loop thread are executed with this lock held
-this patch seperates the underlying action of GetVolume() into a new GetVolumeInternal() function, to be called only when the lock is already held, as is the case for the listener.OnMixerVolumeChanged() call 

# MultipleOutputs_.ensure.input_audio_format.is.zero-initialised.diff [git sha:f2f1801c25e3d8d936fcd828a14f5af6d3d862c9 | pending]
-fixes SIGABRT when mpd is started from a previously paused state
-regression introduced by commit: f5a923b9d16e4c63942a033d1bdb2ab150aae342:
'OutputAll: convert to class, move instance to class Partition'

-input_audio_format was previously declared using the static modifier ensuring it was zero-initialised by default
-the current default-initialised input_audio_format contains garbage at runtime which allows the AudioFormat.IsDefined() 'fail fast' test in MultipleOutputs::Update to pass and the SIGABRT follows in AudioOutput::Open when passed the invalid input_audio_format struct
-switching AudioFormat.IsDefined() for AudioFormat.IsValid() is an alternative workaround

